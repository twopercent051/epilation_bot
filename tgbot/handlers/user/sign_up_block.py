import asyncio
from datetime import datetime
from typing import Literal

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from create_bot import bot
from tgbot.misc.registrations import create_registration
from tgbot.misc.states import UserFSM
from tgbot.models.sql_connector import ClientsDAO, RegistrationsDAO, StaticsDAO, ServicesDAO
from tgbot.keyboards.inline import UserSignUpInline
from tgbot.services.schedule_proof import date_slots_checker, time_three_slots_checker, one_slot_checker, \
    check_free_slot

router = Router()


@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è")
@router.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è —Å –±–æ–Ω—É—Å–æ–º üéÅ")
@router.message(Command("sign_up"))
async def sign_up(message: Message):
    await check_user(user_id=message.from_user.id)


@router.callback_query(F.data == "sign_up")
async def sign_up(callback: CallbackQuery):
    await check_user(user_id=callback.from_user.id)
    await bot.answer_callback_query(callback.id)


async def check_user(user_id: str | int):
    user_id = str(user_id)
    user = await ClientsDAO.get_one_or_none(user_id=user_id)
    if user:
        created_registration = await RegistrationsDAO.get_one_or_none(user_id=user_id, status="created")
        print(created_registration)
        if created_registration:
            await is_created_reg(user_id=user_id, user=user, reg_profile=created_registration)
        else:
            last_regs = await RegistrationsDAO.get_last_4_ordering(user_id=user_id)
            cancel_counter = 0
            for reg in last_regs:
                if reg["status"] == "cancelled":
                    cancel_counter += 1
            if cancel_counter < 4:
                finished_regs = await RegistrationsDAO.get_many(user_id=user_id, status="finished")
                if len(finished_regs) > 0:
                    await is_finished_reg(user_id=user_id)
                else:
                    await no_finished_reg(user_id=user_id, greeting=True)
            else:
                text = "‚úçüèª–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª–∏—á–Ω–æ, –∏ —è –∑–∞–ø–∏—à—É –≤–∞—Å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã"
                kb = UserSignUpInline.msg_to_admin_kb()
                await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)
    else:
        await no_finished_reg(user_id=user_id, greeting=True)


# –†–ê–ó–î–ï–õ –ê. –ï—Å—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∞—è –∑–∞–ø–∏—Å—å
###################################


async def is_created_reg(user_id: str | int, user: dict, reg_profile: dict):
    full_name = user["full_name"]
    reg_date = reg_profile["reg_date"].strftime("%d-%m-%Y")
    reg_time = reg_profile["reg_time_start"].strftime("%H:%M")
    text = f"üëãüèª–ü—Ä–∏–≤–µ—Ç–∏–∫–∏, {user['full_name']}! –£ —Ç–µ–±—è –∏–º–µ–µ—Ç—Å—è –∑–∞–ø–∏—Å—å –Ω–∞ {reg_date} {reg_time} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: {{–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä}}.\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {{–°—É–º–º–∞}}.\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!üåº"

# –†–ê–ó–î–ï–õ B. –ï—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
###################################


async def is_finished_reg(user_id: str | int):
    pass


# –†–ê–ó–î–ï–õ C. –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
###################################


async def no_finished_reg(user_id: str | int, greeting: bool):
    text = "–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞, —á—Ç–æ –í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ–Ω—è! ü§ó\n–í–∞—à–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø—Ä–æ–π–¥–µ—Ç –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ üîù, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é!\n–¢–∞–∫ –∂–µ –Ω–∞ " \
           "–ø–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ —É –≤–∞—Å –±—É–¥–µ—Ç üéÅ–±–æ–Ω—É—Å - 30% (–Ω–∞ –æ–¥–Ω—É –∏–∑ –∑–æ–Ω)\n–ü—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ –ø–æ–ª–Ω–∞—è " \
           "üíØ—Å—Ç–æ–∏–º–æ—Å—Ç—å, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –Ω–∞ –º–µ—Å—Ç–µ —è –≤—Å–µ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—é –∏ –≤–∞—à–∞ —Å—É–º–º–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–∞ 30% –º–µ–Ω—å—à–µüåª"
    if greeting:
        await bot.send_message(chat_id=user_id, text=text)
    text = "–≠–ø–∏–ª—è—Ü–∏—è –¥–ª—è –¥–µ–≤—É—à–∫–∏ –∏–ª–∏ –º—É–∂—á–∏–Ω—ã?"
    kb = UserSignUpInline.create_reg_gender_kb()
    await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)


@router.callback_query(F.data.split(":")[0] == "create_reg|gender")
async def create_reg_c(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    gender = callback.data.split(":")[1]
    gender_str = "–î–µ–≤—É—à–∫–∏" if gender == "girls" else "–ú—É–∂—á–∏–Ω—ã"
    user = await ClientsDAO.get_one_or_none(user_id=user_id)
    if user["gender"] == "":
        await ClientsDAO.update(user_id=user_id, gender=gender)
    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ø–∏–ª—è—Ü–∏–∏ –¥–ª—è {gender_str}:"
    kb = UserSignUpInline.create_reg_category_kb()
    await state.update_data(gender=gender)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@router.callback_query(F.data == "back_to_block_c")
async def back_to_c(callback: CallbackQuery):
    await no_finished_reg(user_id=callback.from_user.id, greeting=False)
    await bot.answer_callback_query(callback.id)


async def menu_render(
        user_id: str | int,
        gender: Literal["boys", "girls"],
        category: Literal["bio", "laser"],
        header: bool
):
    if header:
        category_str = "–ë–∏–æ—ç–ø–∏–ª—è—Ü–∏—è" if category == "bio" else "–õ–∞–∑–µ—Ä"
        text = f"{category_str}\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—ã —ç–ø–∏–ª—è—Ü–∏–∏:"
        await bot.send_message(chat_id=user_id, text=text)
    no_photo = await StaticsDAO.get_one_or_none(title="no_photo")
    photo = await StaticsDAO.get_one_or_none(category="create_reg", title=f"{category}_{gender}")
    photo = photo["file_id"] if photo else no_photo["file_id"]
    services_list = await ServicesDAO.get_order_list(gender=gender, category=category, status="enabled")
    kb = UserSignUpInline.menu_services_kb(services=services_list, ok_services=[], gender=gender)
    await bot.send_photo(chat_id=user_id, photo=photo, reply_markup=kb)


@router.callback_query(F.data.split(":")[0] == "create_reg|category")
async def create_reg_c(callback: CallbackQuery, state: FSMContext):
    category = callback.data.split(":")[1]
    state_data = await state.get_data()
    gender = state_data["gender"]
    await state.update_data(ok_services=[], category=category)
    await menu_render(user_id=callback.from_user.id, gender=gender, category=category, header=True)
    await bot.answer_callback_query(callback.id)


@router.callback_query(F.data.split(":")[0] == "switch_service")
async def switch_service(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split(":")[1])
    state_data = await state.get_data()
    ok_services = state_data["ok_services"]
    gender = state_data["gender"]
    category = state_data["category"]
    if service_id in ok_services:
        ok_services.remove(service_id)
    else:
        ok_services.append(service_id)
    services_list = await ServicesDAO.get_order_list(gender=gender, category=category, status="enabled")
    kb = UserSignUpInline.menu_services_kb(services=services_list, ok_services=ok_services, gender=gender)
    await state.update_data(ok_services=ok_services)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@router.callback_query(F.data == "main_menu_c_accept")
async def accept_reg(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    ok_services = state_data["ok_services"]
    gender = state_data["gender"]
    gender_str = "–î–µ–≤—É—à–∫–∏" if gender == "girls" else "–ú—É–∂—á–∏–Ω—ã"
    category = state_data["category"]
    category_str = "–ë–∏–æ—ç–ø–∏–ª—è—Ü–∏—è –≤–æ—Å–∫–æ–º" if category == "bio" else "–õ–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è"
    services = await ServicesDAO.get_order_list(gender=gender, category=category, status="enabled")
    services_text = []
    services_list = []
    price_counter, duration_counter = 0, 0
    for service in services:
        if service["id"] in ok_services:
            services_text.append(f"{service['title']} - {service['price']}—Ä")
            services_list.append(service)
            price_counter += service["price"]
            duration_counter += service["duration"]
    duration_str = f"{duration_counter // 60}—á {duration_counter % 60}–º–∏–Ω"
    text = [
        "–í—ã –≤—ã–±—Ä–∞–ª–∏:",
        f"–≠–ø–∏–ª—è—Ü–∏—è –¥–ª—è {gender_str}.",
        f"–í–∏–¥ —ç–ø–∏–ª—è—Ü–∏–∏: {category_str}",
        "–ó–æ–Ω—ã —ç–ø–∏–ª—è—Ü–∏–∏:",
        "\n".join(services_text),
        f"–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ —Å—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–¥—É—Ä - {duration_str}",
        f"–ò—Ç–æ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {price_counter}—Ä*",
        "* - —Å—Ç–æ–∏–º–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞, –±–µ–∑ —É—á—ë—Ç–∞ –±–æ–Ω—É—Å–∞ -30% –Ω–∞ 1 –∑–æ–Ω—É –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."
    ]
    kb = UserSignUpInline.create_reg_accept_kb(category=category)
    await state.update_data(duration=duration_counter, price=price_counter, services=services_list, reg_type="new_reg")
    await callback.message.answer(text="\n".join(text), reply_markup=kb)
    await bot.answer_callback_query(callback.id)


def services_text_render(services: list, category: str) -> list:
    category_str = "–ë–∏–æ—ç–ø–∏–ª—è—Ü–∏—è –≤–æ—Å–∫–æ–º" if category == "bio" else "–õ–∞–∑–µ—Ä"
    services_text = []
    for service in services:
        services_text.append(f"{service['title']} - {category_str} ({service['duration']} –º–∏–Ω—É—Ç)")
    return services_text


@router.callback_query(F.data == "choose_date")
async def select_data(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    duration = state_data["duration"]
    category = state_data["category"]
    price = state_data["price"]
    services = state_data["services"]
    reg_type = state_data["reg_type"]
    days_list = await date_slots_checker(0, duration)
    offset = (days_list[-1] - datetime.today()).days if len(days_list) == 6 else None
    services_text = services_text_render(services=services, category=category)
    duration_str = f"{duration // 60}—á {duration % 60}–º–∏–Ω"
    text = [
        "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:",
        *services_text,
        f"–û–±—â–µ–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–¥—É—Ä: {duration_str}",
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}—Ä.",
        "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏üìù:"
    ]
    # todo edit back_data
    back_data = "main_menu_c_accept" if reg_type == "new_reg" else "pass"
    kb = UserSignUpInline.choose_date_kb(date_list=days_list, back_data=back_data, offset=offset)
    await callback.message.answer("\n".join(text), reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@router.callback_query(F.data.split(":")[0] == "date_offset")
async def date_circle(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    duration = state_data["duration"]
    offset = int(callback.data.split(":")[1])
    days_list = await date_slots_checker(offset, duration)
    offset = (days_list[-1] - datetime.today()).days if len(days_list) == 6 else 0
    kb = UserSignUpInline.choose_date_kb(date_list=days_list, back_data="main_menu_c_accept", offset=offset)
    await callback.message.edit_reply_markup(reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@router.callback_query(F.data.split(":")[0] == "select_date")
async def select_time(callback: CallbackQuery, state: FSMContext):
    date = datetime.strptime(callback.data.split(":")[1], "%d.%m.%Y")
    state_data = await state.get_data()
    duration = state_data["duration"]
    category = state_data["category"]
    price = state_data["price"]
    services = state_data["services"]
    slots_list = await time_three_slots_checker(date=date, duration=duration)
    services_text = services_text_render(services=services, category=category)
    duration_str = f"{duration // 60}—á {duration % 60}–º–∏–Ω"
    text = [
        "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:",
        *services_text,
        f"–û–±—â–µ–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–¥—É—Ä: {duration_str}",
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}—Ä.",
        f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {callback.data.split(':')[1]}\n",
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –≤–∞—Å –≤—Ä–µ–º—è üìù",
        "‚úÖ–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:",
        "1) –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä), –∏ –±–æ—Ç –Ω–∞–∑–Ω–∞—á–∏—Ç –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ä–∞–º–∫–∞—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å "
        "—É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ —É—Å–ª—É–≥ üòä",
        "2) –ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 11:00, –∏ –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –Ω–∞–ª–∏—á–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
    ]
    kb = UserSignUpInline.choose_time_kb(slots=slots_list)
    await state.update_data(reg_date=date)
    await state.set_state(UserFSM.reg_time)
    await callback.message.answer("\n".join(text), reply_markup=kb)
    await bot.answer_callback_query(callback.id)


async def finish_registration(user_id: str | int, state: FSMContext):
    state_data = await state.get_data()
    reg_date = state_data["reg_date"]
    reg_time = state_data["reg_time"]
    duration = state_data["duration"]
    reg_type = state_data["reg_type"]
    services = state_data["services"]
    category = state_data["category"]
    price = state_data["price"]
    duration_str = f"{duration // 60}—á {duration % 60}–º–∏–Ω"
    services_text = services_text_render(services=services, category=category)
    if reg_type == "new_reg":
        text = [
            "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:",
            *services_text,
            f"–û–±—â–µ–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–¥—É—Ä: {duration_str}",
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}—Ä.",
            f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {reg_date.strftime('%d.%m.%Y')}\n",
            f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {reg_time.strftime('%H.%M')}\n",
        ]
        text = "\n".join(text)
        kb = UserSignUpInline.finish_reg_accept_kb(date=reg_date)
    else:
        text = f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ {reg_date.strftime('%d.%m.%Y')} {reg_time.strftime('%H.%M')}." \
               f"\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è üåª"
        kb = None
        #todo –°–¥–µ–ª–∞—Ç—å —Ä–µ–¥–∞–∫—Ç—É—Ä—É –∑–∞–ø–∏—Å–∏
    await bot.send_message(chat_id=user_id, reply_markup=kb, text=text)


@router.message(F.text, UserFSM.reg_time)
async def select_time(message: Message, state: FSMContext):
    try:
        dtime = datetime.strptime(message.text.replace(",", "."), "%H.%M").time()
        await state.update_data(reg_time=dtime)
    except ValueError:
        return
    state_data = await state.get_data()
    date = state_data["reg_date"]
    duration = state_data["duration"]
    free_slot = await check_free_slot(reg_date=date, reg_time=dtime, duration=duration)
    if free_slot:
        await finish_registration(user_id=message.from_user.id, state=state)
    else:
        text = "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ " \
               "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—à–∏—Ç–µ " \
               "–û–∫—Å–∞–Ω–µ –≤ –ª–∏—á–∫—É."
        await message.answer(text)


@router.callback_query(F.data.split(":")[0] == "select_time")
async def select_time(callback: CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    date = state_data["reg_date"]
    duration = state_data["duration"]
    slot = callback.data.split(":")[1]
    slot_start_time = await one_slot_checker(date=date, day_part=slot, duration=duration)
    if slot_start_time:
        await state.update_data(reg_time=slot_start_time)
        await finish_registration(user_id=callback.from_user.id, state=state)
    else:
        text = "–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏. –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ " \
               "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—Ä–µ–º—è. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—à–∏—Ç–µ " \
               "–û–∫—Å–∞–Ω–µ –≤ –ª–∏—á–∫—É."
        await callback.message.answer(text)
    await bot.answer_callback_query(callback.id)


@router.callback_query(F.data == "finish_reg")
async def finish_reg(callback: CallbackQuery, state: FSMContext):
    finished_regs = await RegistrationsDAO.get_by_user_id(user_id=str(callback.from_user.id), finished=True)
    state_data = await state.get_data()
    reg_date = state_data["reg_date"]
    reg_time = state_data["reg_time"]
    services = state_data["services"]
    duration = state_data["duration"]
    price = state_data["price"]
    category = state_data["category"]
    user_id = str(callback.from_user.id)
    user = await ClientsDAO.get_one_or_none(user_id=user_id)
    if user:
        full_name = user["full_name"]
        phone = user["phone"]
    else:
        return
    if len(finished_regs) == 0:
        free_slot = await check_free_slot(reg_date=reg_date, reg_time=reg_time, duration=duration)
        if free_slot:
            duration_str = f"{duration // 60}—á {duration % 60}–º–∏–Ω"
            services_text = services_text_render(services=services, category=category)
            text = [
                "–í—Ä–µ–º—è –∑–∞ –≤–∞–º–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!\n",
                "–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:",
                *services_text,
                f"–û–±—â–µ–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ–¥—É—Ä: {duration_str}",
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}—Ä.",
                f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {reg_date.strftime('%d.%m.%Y')}",
                f"–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {reg_time.strftime('%H.%M')}\n",
            ]
            text = "\n".join(text)
            await create_registration(data=state_data, phone=phone, user_id=user_id)
            await callback.message.answer(text)
            if full_name == "":
                await state.set_state(UserFSM.full_name_sign)
                name_text = "–û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –≤–∞—à–∏ –§–ò, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.\n\n–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –§–∞–º–∏–ª–∏—é " \
                            "–∏ –ò–º—è.\n–§–æ—Ä–º–∞—Ç: –ò–≤–∞–Ω–æ–≤–∞ –°–≤–µ—Ç–ª–∞–Ω–∞"
                await callback.message.answer(name_text)
            else:
                await check_birthday(user_id=user_id, state=state)
        else:
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüòî\n–í—ã–±–µ—Ä–∏—Ç–µüôè –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"
    else:
        service_text = []
        for service in services:
            service_text.append(service["title"])
        service_text = ", ".join(service_text)
        text = [
            f"üëãüèª–ü—Ä–∏–≤–µ—Ç–∏–∫–∏, {full_name}! –ó–∞–ø–∏—Å–∞–ª–∞ —Ç–µ–±—è –Ω–∞ {reg_date.strftime('%d.%m.%Y')} {reg_time.strftime('%H.%M')} "
            f"–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: {service_text}."
            f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price} ‚ÇΩ."
            "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!üåº"
        ]
        text = "\n".join(text)
        await create_registration(data=state_data, phone=phone, user_id=user_id)
    await callback.message.answer(text)
    await bot.answer_callback_query(callback.id)


@router.message(F.text, UserFSM.full_name_sign)
async def finish_reg(message: Message, state: FSMContext):
    full_name = message.text.strip()
    await ClientsDAO.update(user_id=message.from_user.id, full_name=full_name)
    await state.set_state(UserFSM.home)
    await check_birthday(user_id=message.from_user.id, state=state)


async def check_birthday(user_id: str | int, state: FSMContext):
    user = await ClientsDAO.get_one_or_none(user_id=str(user_id))
    birthday = user["birthday"]
    if birthday and datetime.strptime(birthday, "%d.%m.%Y") == "01.01.1900":
        await resource_menu(user_id=user_id)
    else:
        text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –º–Ω–µ —Ä–∞–¥–æ–≤–∞—Ç—å –≤–∞—Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ üíå –∏ " \
               "–±–æ–Ω—É—Å–∞–º–∏ üéÅ\n–§–æ—Ä–º–∞—Ç: 01.01.1980"
        kb = UserSignUpInline.no_birthday_kb()
        await state.set_state(UserFSM.birthday_sign)
        await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)


@router.message(F.text, UserFSM.birthday_sign)
async def finish_reg(message: Message, state: FSMContext):
    try:
        birthday = datetime.strptime(message.text, "%d.%m.%Y")
        await ClientsDAO.update(user_id=message.from_user.id, birthday=birthday)
        await state.set_state(UserFSM.home)
        await resource_menu(user_id=message.from_user.id)
    except ValueError:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ " \
               "–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 07.02.1990"
        kb = UserSignUpInline.no_birthday_kb()
        await message.answer(text=text, reply_markup=kb)


@router.callback_query(F.data == "no_birthday")
async def finish_reg(callback: CallbackQuery, state: FSMContext):
    birthday = datetime.strptime("01.01.1900", "%d.%m.%Y")
    await ClientsDAO.update(user_id=callback.from_user.id, birthday=birthday)
    await state.set_state(UserFSM.home)
    await resource_menu(user_id=callback.from_user.id)
    await bot.answer_callback_query(callback.id)


async def resource_menu(user_id: int | str):
    text = "–ü–æ–Ω–∏–º–∞—é, –≤—ã –Ω–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª–∏  üôÅ –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å–∏–∫  üôè  –û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ–±–æ –º–Ω–µ ?"
    kb = UserSignUpInline.resource_menu_kb()
    await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)


@router.callback_query(F.data.split(":")[0] == "resource")
async def finish_reg(callback: CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    resource = callback.data.split(":")[1]
    await ClientsDAO.update(user_id=user_id, resource=resource)
    sticker_id = "CAACAgIAAxkBAAIju2S3AtDthsNHP4KChB9UNAgmk4VEAAKOFQACJU3BSY8WTX7r0TbzLwQ"
    await callback.message.answer_sticker(sticker=sticker_id)
    user = await ClientsDAO.get_one_or_none(user_id=user_id)
    state_data = await state.get_data()
    if user["entry_point"] == "office":
        reg_date = state_data["reg_date"]
        reg_time = state_data["reg_time"]
        services = state_data["services"]
        service_text = []
        for service in services:
            service_text.append(service["title"])
        service_text = ", ".join(service_text)
        text = f"–ï—Ö—É—É—É—É!! üéâüéâüéâ  –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\n\n\n–ó–∞–ø–∏—Å–∞–ª–∞ —Ç–µ–±—è –Ω–∞ " \
               f"{reg_date.strftime('%d.%m.%Y')} {reg_time.strftime('%H.%M')} –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã: " \
               f"{service_text}.\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {user['price']} ‚ÇΩ.\n–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è –∏ –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!üåº"
        kb = None
        await create_registration(data=state_data, phone=user["phone"], user_id=callback.from_user.id)
    else:
        text = "–ï—Ö—É—É—É—É!! üéâüéâüéâ  –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ó–∞–ø–∏—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –≤–∞–º –∞–≤–∞–Ω—Å–∞ –ø—Ä–∏–¥—ë—Ç " \
               "—Å–æ–æ–±—â–µ–Ω–∏–µ üíö"
        await callback.message.answer(text)
        await asyncio.sleep(1)
        text = "–¢–∞–∫ –∫–∞–∫ –º—ã –µ—â–µ —Å –≤–∞–º–∏ –Ω–µ –∑–Ω–∞–∫–æ–º—ã ü§∑ ‚Äç‚ôÄÔ∏è\n\n–í–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, " \
               "–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç –≤—Ä–µ–º—è –∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç, —è –≤—ã–Ω—É–∂–¥–µ–Ω–∞ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —É –≤–∞—Å –≤–Ω–µ—Å—Ç–∏ –∞–≤–∞–Ω—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 500—Ä. üçì\n–û–Ω " \
               "–ø–æ–∑–≤–æ–ª–∏—Ç –º–Ω–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ–π –≤ —Ç–æ–º, —á—Ç–æ –≤—ã —Ç–æ—á–Ω–æ –ø—Ä–∏–¥–µ—Ç–µ  üòâ\n\n–ê–≤–∞–Ω—Å –±—É–¥–µ—Ç —É—á—Ç–µ–Ω –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ " \
               "–ø—Ä–æ—Ü–µ–¥—É—Ä—ã. –ß–µ–∫ –æ –µ–≥–æ –≤–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∏–¥–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ üíö"
        await callback.message.answer(text)
        reg_id = await create_registration(
            data=state_data,
            phone=user["phone"],
            user_id=callback.from_user.id,
            advance="processing"
        )
        text = '–ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å 500—Ä" –∏ –≤–∞—Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ –ø–ª–∞—Ç—ë–∂–Ω—É—é —Ñ–æ—Ä–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã. –û–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ!'
        kb = UserSignUpInline.pay_advance_kb(reg_id=reg_id)

