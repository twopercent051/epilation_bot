from datetime import datetime

from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from aiogram import F, Router
from aiogram.fsm.context import FSMContext

from create_bot import bot, config
from tgbot.keyboards.inline import UserInlineKeyboard as inline_kb
from tgbot.keyboards.reply import UserReplyKeyboard as reply_kb
from tgbot.misc.states import UserFSM
from tgbot.models.sql_connector import ClientsDAO, RegistrationsDAO

router = Router()

admin_id = config.tg_bot.admin_ids[0]


class UserMainMenu:

    @staticmethod
    async def new_clients_menu(user_id: str | int, name: str):
        text = f"üåº–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è?ü§ó\n–ú–µ–Ω—è –∑–æ–≤—É—Ç –û–∫—Å–∞–Ω–∞, –±—É–¥—É —Ä–∞–¥–∞ —Å—Ç–∞—Ç—å –≤–∞—à–∏–º –º–∞—Å—Ç–µ—Ä–æ–º " \
               f"—ç–ø–∏–ª—è—Ü–∏–∏.\n–ó–¥–µ—Å—å –≤—ã —É–∑–Ω–∞–µ—Ç–µ –æ–±–æ –º–Ω–µ –∏ —ç–ø–∏–ª—è—Ü–∏–∏ –±–æ–ª—å—à–µ, —Ç–∞–∫–∂–µ —è –ø–æ–º–æ–≥—É –í–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è.\n–í—ã–±–µ—Ä–∏—Ç–µ, " \
               f"–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å —á–µ–≥–æ –Ω–∞—á–Ω–µ–º‚ùì"
        kb = reply_kb.new_menu_kb()
        await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)

    @staticmethod
    async def current_clients_menu(user_id: str | int, name: str):
        text = f"–ü—Ä–∏–≤–µ—Ç–∏–∫–∏, {name}!\nüòä–†–∞–¥–∞ –í–∞—Å –≤–∏–¥–µ—Ç—å –≤ –º–æ–µ–º –±–æ—Ç–µ!\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ " \
               f"–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–∏–µ–º ‚úÖ"
        kb = reply_kb.current_menu_kb()
        await bot.send_message(chat_id=user_id, text=text, reply_markup=kb)

    @classmethod
    async def menu_type(cls, user_id: str, name: str, phone: str, state: FSMContext):
        user = await ClientsDAO.get_one_or_none(user_id=user_id)
        if user:
            # finished_registrations = await RegistrationsDAO.get_many(phone=phone, status="finished")
            finished_registrations = await RegistrationsDAO.get_many(user_id=user_id, status="finished")
            if len(finished_registrations) > 0:
                await cls.current_clients_menu(user_id=user_id, name=name)
            else:
                await cls.new_clients_menu(user_id=user_id, name=name)
        else:
            await cls.new_clients_menu(user_id=user_id, name=name)
        await state.set_state(UserFSM.main_menu)


@router.message(Command("start"))
async def user_start(message: Message, command: CommandObject, state: FSMContext):
    user = await ClientsDAO.get_one_or_none(user_id=str(message.from_user.id))
    if user:
        await UserMainMenu.menu_type(
            user_id=str(message.from_user.id),
            name=user["full_name"],
            phone=user["phone"],
            state=state
        )
        return
    arg = command.args
    if arg == "office":
        text = "üåº–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –∫–Ω–æ–ø–∫—É ü§ó\n–ü–æ—Å–ª–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—É–¥–µ—Ç –≤–≤–µ—Å—Ç–∏ –§–ò, " \
               "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –µ–¥–∏–Ω–æ–∂–¥—ã! –ë–æ—Ç –∑–∞–ø–æ–º–Ω–∏—Ç –≤–∞—Å  üòç\n–í –ø–æ—Å–ª–µ–¥—É—é—â–µ–º " \
               "–≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ üíö"
        kb = reply_kb.start_kb(is_office=True)
    else:
        text = "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏! –ù–∞–∂–º–∏—Ç–µ —Å—Ç–∞—Ä—Ç, —á—Ç–æ –±—ã –º—ã —Å–º–æ–≥–ª–∏ –Ω–∞—á–∞—Ç—å  ü§©"
        kb = reply_kb.start_kb(is_office=False)
    await state.set_state(UserFSM.home)
    await message.answer(text, reply_markup=kb)


###############
#  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –º–∏—Ä–∞


@router.message(F.contact, UserFSM.home)
async def phone_record(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    user = await ClientsDAO.get_one_or_none(phone=phone)
    name = user["full_name"] if user else ""
    username = f"@{message.from_user.username}" if message.from_user.username else ""
    await ClientsDAO.create(
        user_id=str(message.from_user.id),
        username=username,
        phone=phone,
        full_name=name,
        gender="unknown"
    )
    await UserMainMenu.menu_type(user_id=str(message.contact.user_id), name=name, phone=phone, state=state)


###############
#  –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–∑ –æ—Ñ–∏—Å–∞


@router.message(F.text, UserFSM.home)
async def phone_record(message: Message, state: FSMContext):
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–û–Ω –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å–µ–π.\n–§–æ—Ä–º–∞—Ç: +79117737477"
    await state.set_state(UserFSM.manual_phone)
    await message.answer(text)


@router.message(F.text, UserFSM.manual_phone)
async def phone_record(message: Message, state: FSMContext):
    if len(message.text) == 12 and message.text[0:3] == "+79":
        user = await ClientsDAO.get_one_or_none(phone=message.text)
        if user:
            text = "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –û–∫—Å–∞–Ω–µ –≤ –ª–∏—á–∫—É, —á—Ç–æ–±—ã –æ–Ω–∞ " \
                   "—Å–≤—è–∑–∞–ª–∞ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —ç—Ç–∏–º –±–æ—Ç–æ–º. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è üìù–æ–Ω–ª–∞–π–Ω –∏ –ø–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ " \
                   "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üíå"
            kb = inline_kb.phone_in_base_kb(phone=message.text)
        else:
            text = "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –§–∞–º–∏–ª–∏—é –∏ –ò–º—è.\n–§–æ—Ä–º–∞—Ç: –ò–≤–∞–Ω–æ–≤–∞ –°–≤–µ—Ç–ª–∞–Ω–∞"
            kb = None
            await state.set_state(UserFSM.full_name)
            await state.update_data(phone=message.text)
    else:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ " \
               "—Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö"
        kb = None
    await message.answer(text, reply_markup=kb)


@router.callback_query(F.data.split(":")[0] == "msg_to_admin")
async def msg_to_admin(callback: CallbackQuery):
    phone = callback.data.split(":")[1]
    user = await ClientsDAO.get_one_or_none(phone=phone)
    cur_username = f"@{callback.from_user.username}" if callback.from_user.username else ""
    admin_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {cur_username} —É–∫–∞–∑–∞–ª –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}, –Ω–æ –æ–Ω —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ —É " \
                 f"–∫–ª–∏–µ–Ω—Ç–∞ {user['username']}. –ù—É–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –æ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω."
    admin_kb = inline_kb.answer_to_user_kb(user_id=callback.from_user.id)
    user_text = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∫—Å–∞–Ω–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è."
    user_kb = inline_kb.msg_to_admin_kb()
    await bot.send_message(chat_id=admin_id, text=admin_text, reply_markup=admin_kb)
    await callback.message.answer(user_text, reply_markup=user_kb)
    await bot.answer_callback_query(callback.id)


@router.callback_query(F.data == "correct_phone")
async def correct_phone(callback: CallbackQuery, state: FSMContext):
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö"
    await state.set_state(UserFSM.manual_phone)
    await callback.message.answer(text)
    await bot.answer_callback_query(callback.id)


@router.message(F.text, UserFSM.full_name)
async def get_full_name(message: Message, state: FSMContext):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:"
    kb = inline_kb.user_gender_kb()
    await state.update_data(full_name=message.text)
    await message.answer(text, reply_markup=kb)


@router.callback_query(F.data.split(":")[0] == "user_gender")
async def get_user_gender(callback: CallbackQuery, state: FSMContext):
    text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–∑–≤–æ–ª—è—Ç –º–Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å  –≤–∞–º –±–æ–Ω—É—Å—ã –≤ –≤–∏–¥–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è üéÅ\n–§–æ—Ä–º–∞—Ç: " \
           "01.01.1980"
    kb = inline_kb.user_birthday_kb()
    await state.update_data(gender=callback.data.split(":")[1])
    await state.set_state(UserFSM.birthday)
    await callback.message.answer(text, reply_markup=kb)
    await bot.answer_callback_query(callback.id)


@router.message(F.text, UserFSM.birthday)
async def get_user_birthday(message: Message, state: FSMContext):
    try:
        birthday = datetime.strptime(message.text, "%d.%m.%Y")
        username = f"@{message.from_user.username}" if message.from_user.username else ""
        state_data = await state.get_data()
        await ClientsDAO.create(
            user_id=str(message.from_user.id),
            full_name=state_data["full_name"],
            username=username,
            phone=state_data["phone"],
            gender=state_data["gender"],
            birthday=birthday
        )
        await UserMainMenu.menu_type(user_id=str(message.from_user.id), name=state_data["full_name"],
                                     phone=state_data["phone"], state=state)
    except ValueError:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ–¥—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É " \
               "—Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 07.02.1990"
        kb = inline_kb.user_birthday_kb()
        await state.set_state(UserFSM.birthday)
        await message.answer(text, reply_markup=kb)


@router.callback_query(F.data == "main_menu")
async def main_menu_clb(callback: CallbackQuery, state: FSMContext):
    username = f"@{callback.from_user.username}" if callback.from_user.username else ""
    state_data = await state.get_data()
    await ClientsDAO.create(
        user_id=str(callback.from_user.id),
        full_name=state_data["full_name"],
        username=username,
        phone=state_data["phone"],
        gender=state_data["gender"],
    )
    await UserMainMenu.menu_type(
        user_id=str(callback.from_user.id),
        name=state_data["full_name"],
        phone=state_data["phone"],
        state=state
    )
    await bot.answer_callback_query(callback.id)



